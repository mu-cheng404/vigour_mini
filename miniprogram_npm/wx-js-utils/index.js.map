{"version":3,"sources":["index.js","libs/WXPay.js","libs/WXUniformMessage.js","libs/utils.js","libs/WXMINIMessage.js","libs/WXMINIUser.js","libs/WXMINIQR.js","libs/WXMINIActMessage.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA,ACHA;AHUA,ACHA,ACHA,ACHA;AHUA,ACHA,ACHA,ACHA;AHUA,AIZA,AHSA,ACHA,ACHA;AHUA,AIZA,AHSA,ACHA,ACHA;AHUA,AIZA,AHSA,ACHA,ACHA;AHUA,AIZA,ACHA,AJYA,ACHA,ACHA;AHUA,AIZA,ACHA,AJYA,ACHA,ACHA;AHUA,AIZA,ACHA,AJYA,ACHA,ACHA;AHUA,AIZA,AENA,ADGA,AJYA,ACHA,ACHA;AHUA,AIZA,AENA,ADGA,AJYA,ACHA,ACHA;AHUA,AIZA,AENA,ADGA,AJYA,ACHA,ACHA;AHUA,AOrBA,AHSA,AENA,ADGA,AJYA,ACHA,ACHA;AIXA,AHSA,AENA,ADGA,AJYA,ACHA,ACHA;AIXA,AHSA,AENA,ADGA,AJYA,ACHA,ACHA;AIXA,AHSA,AENA,ADGA,AJYA,ACHA,ACHA;AIXA,AHSA,AENA,ADGA,AJYA,ACHA,ACHA;AIXA,AHSA,AENA,ADGA,AJYA,ACHA,ACHA;AIXA,AHSA,AENA,ADGA,AJYA,ACHA,ACHA;AIXA,AHSA,AENA,ADGA,AJYA,ACHA;AKdA,AHSA,AENA,ADGA,AJYA,ACHA;AKdA,AHSA,AENA,ADGA,AJYA,ACHA;AKdA,AHSA,AENA,ADGA,AJYA,ACHA;AKdA,AHSA,AENA,ADGA,AJYA,ACHA;AKdA,AHSA,AENA,ADGA,AJYA,ACHA;AKdA,AHSA,AENA,ADGA,AJYA,ACHA;AKdA,AHSA,AENA,ADGA,AJYA,ACHA;AKdA,AHSA,AENA,ADGA,AJYA,ACHA;AKdA,AHSA,AENA,ADGA,AJYA,ACHA;AKdA,AHSA,AENA,ADGA,AJYA,ACHA;AKdA,AHSA,AENA,ADGA,AJYA,ACHA;AKdA,AHSA,AENA,ADGA,AJYA,ACHA;AKdA,AHSA,AENA,ADGA,AJYA,ACHA;AKdA,AHSA,AENA,ADGA,AJYA,ACHA;AKdA,AHSA,AENA,ADGA,AJYA,ACHA;AKdA,AHSA,AENA,ADGA,AJYA,ACHA;AKdA,AHSA,AENA,ADGA,AJYA,ACHA;AKdA,AHSA,AENA,ADGA,AJYA,ACHA;AKdA,AHSA,AENA,ADGA,AJYA,ACHA;AKdA,AHSA,AENA,ADGA,AJYA,ACHA;AKdA,AHSA,AENA,ADGA,AJYA,ACHA;AKdA,AHSA,AENA,ADGA,AJYA,ACHA;AKdA,AHSA,AENA,ADGA,AJYA,ACHA;AKdA,ADGA,ADGA,AJYA,ACHA;AKdA,ADGA,ADGA,AJYA,ACHA;AKdA,ADGA,ADGA,AJYA,ACHA;AKdA,ADGA,ADGA,AJYA,ACHA;AKdA,ADGA,ADGA,AJYA,ACHA;AKdA,ADGA,ADGA,AJYA,ACHA;AKdA,ADGA,ADGA,AJYA,ACHA;AKdA,ADGA,ADGA,AJYA,ACHA;AKdA,ADGA,ADGA,AJYA,ACHA;AKdA,ADGA,ADGA,AJYA,ACHA;AKdA,ADGA,ADGA,AJYA,ACHA;AKdA,ADGA,ADGA,AJYA,ACHA;AKdA,ADGA,ADGA,AJYA;AMjBA,ADGA,ADGA,AJYA;AMjBA,ADGA,ADGA,AJYA;AMjBA,ADGA,ADGA,AJYA;AMjBA,ADGA,ADGA,AJYA;AKdA,ADGA,AJYA;AKdA,ADGA,AJYA;AKdA,ADGA,AJYA;AKdA,ADGA,AJYA;AKdA,ADGA,AJYA;AKdA,ADGA,AJYA;AKdA,ADGA,AJYA;AKdA,ADGA,AJYA;AKdA,ADGA,AJYA;AKdA,ADGA,AJYA;AKdA,ADGA,AJYA;AKdA,ADGA,AJYA;AKdA,ADGA,AJYA;AKdA,ADGA,AJYA;AKdA,ADGA,AJYA;AKdA,ADGA,AJYA;AKdA,ADGA,AJYA;AKdA,ADGA,AJYA;AKdA,ADGA,AJYA;AKdA,ADGA,AJYA;AKdA,ADGA,AJYA;AKdA,ADGA,AJYA;AKdA,ADGA,AJYA;AKdA,ADGA,AJYA;AKdA,ADGA,AJYA;AKdA,ADGA,AJYA;AKdA,ADGA,AJYA;AKdA,ADGA,AJYA;AKdA,ADGA,AJYA;AKdA,ADGA,AJYA;AKdA,ADGA,AJYA;AKdA,ADGA,AJYA;AKdA,ADGA,AJYA;AKdA,ADGA,AJYA;AKdA,ADGA,AJYA;AKdA,ADGA,AJYA;AKdfile":"index.js","sourcesContent":["const {\n    WXPay,\n    WXPayUtil,\n    WXPayConstants\n} = require('./libs/WXPay');\nconst WXUniformMessage = require('./libs/WXUniformMessage');\nconst WXMINIMessage = require('./libs/WXMINIMessage');\nconst WXMINIUser = require('./libs/WXMINIUser');\nconst WXMINIQR = require('./libs/WXMINIQR');\nconst WXMINIActMessage = require('./libs/WXMINIActMessage');\n\n\nmodule.exports = {\n    WXPay,\n    WXPayUtil,\n    WXPayConstants,\n    WXMINIMessage,\n    WXUniformMessage,\n    WXMINIUser,\n    WXMINIQR,\n    WXMINIActMessage\n};","let request = require('request');\nlet Md5     = require('md5');\nlet xml2js  = require('xml2js');\nlet uuid    = require('uuid');\nlet crypto = require('crypto');\n\nlet _DEFAULT_TIMEOUT = 10 * 1000; // ms\n\nlet WXPayConstants = {\n\n    // SUCCESS, FAIL\n    SUCCESS: 'SUCCESS',\n    FAIL: 'FAIL',\n\n    // 签名类型\n    SIGN_TYPE_HMACSHA256: 'HMAC-SHA256',\n    SIGN_TYPE_MD5: 'MD5',\n\n    // 字段\n    FIELD_SIGN: 'sign',\n    FIELD_SIGN_TYPE: 'sign_type',\n\n    // URL\n    MICROPAY_URL: 'https://api.mch.weixin.qq.com/pay/micropay',\n    UNIFIEDORDER_URL: 'https://api.mch.weixin.qq.com/pay/unifiedorder',\n    ORDERQUERY_URL: 'https://api.mch.weixin.qq.com/pay/orderquery',\n    REVERSE_URL: 'https://api.mch.weixin.qq.com/secapi/pay/reverse',\n    CLOSEORDER_URL: 'https://api.mch.weixin.qq.com/pay/closeorder',\n    REFUND_URL: 'https://api.mch.weixin.qq.com/secapi/pay/refund',\n    REFUNDQUERY_URL: 'https://api.mch.weixin.qq.com/pay/refundquery',\n    DOWNLOADBILL_URL: 'https://api.mch.weixin.qq.com/pay/downloadbill',\n    REPORT_URL: 'https://api.mch.weixin.qq.com/payitil/report',\n    SHORTURL_URL: 'https://api.mch.weixin.qq.com/tools/shorturl',\n    AUTHCODETOOPENID_URL: 'https://api.mch.weixin.qq.com/tools/authcodetoopenid',\n\n    // Sandbox URL\n    SANDBOX_MICROPAY_URL: 'https://api.mch.weixin.qq.com/sandboxnew/pay/micropay',\n    SANDBOX_UNIFIEDORDER_URL: 'https://api.mch.weixin.qq.com/sandboxnew/pay/unifiedorder',\n    SANDBOX_ORDERQUERY_URL: 'https://api.mch.weixin.qq.com/sandboxnew/pay/orderquery',\n    SANDBOX_REVERSE_URL: 'https://api.mch.weixin.qq.com/sandboxnew/secapi/pay/reverse',\n    SANDBOX_CLOSEORDER_URL: 'https://api.mch.weixin.qq.com/sandboxnew/pay/closeorder',\n    SANDBOX_REFUND_URL: 'https://api.mch.weixin.qq.com/sandboxnew/secapi/pay/refund',\n    SANDBOX_REFUNDQUERY_URL: 'https://api.mch.weixin.qq.com/sandboxnew/pay/refundquery',\n    SANDBOX_DOWNLOADBILL_URL: 'https://api.mch.weixin.qq.com/sandboxnew/pay/downloadbill',\n    SANDBOX_REPORT_URL: 'https://api.mch.weixin.qq.com/sandboxnew/payitil/report',\n    SANDBOX_SHORTURL_URL: 'https://api.mch.weixin.qq.com/sandboxnew/tools/shorturl',\n    SANDBOX_AUTHCODETOOPENID_URL: 'https://api.mch.weixin.qq.com/sandboxnew/tools/authcodetoopenid',\n\n};\n\nconst WXPayUtil = {\n\n    /**\n   * XML 字符串转换成 object\n   *\n   * @param {string} xmlStr\n   * @returns {Promise}\n   */\n    xml2obj: function (xmlStr) {\n        return new Promise(function(resolve, reject) {\n            let parseString = xml2js.parseString;\n            parseString(xmlStr, function (err, result) {\n                if (err) {\n                    reject(err);\n                }\n                else {\n                    let data = result['xml'];\n                    let newData = {};\n                    Object.keys(data).forEach(function(key, idx) {\n                        if (data[key].length > 0) { newData[key] = data[key][0] }\n                    });\n                    resolve(newData);\n                }\n            });\n        });\n    },\n\n    /**\n   * object 转换成 XML 字符串\n   *\n   * @param {object} obj\n   * @returns {Promise}\n   */\n    obj2xml: function (obj) {\n        return new Promise(function (resolve, reject) {\n            let builder = new xml2js.Builder({ cdata: true, rootName: 'xml' });\n            try {\n                let xmlStr = builder.buildObject(obj);\n                resolve(xmlStr);\n            } catch (err) {\n                reject(err);\n            }\n        });\n    },\n\n    /**\n   * 生成签名\n   *\n   * @param {object} data\n   * @param {string} key API key\n   * @param {string} signTypeParam\n   * @returns {string}\n   */\n    generateSignature: function (data, key, signTypeParam) {\n        let signType = signTypeParam || WXPayConstants.SIGN_TYPE_MD5;\n        if (signType !== WXPayConstants.SIGN_TYPE_MD5 && signType !== WXPayConstants.SIGN_TYPE_HMACSHA256) {\n            throw new Error('Invalid signType: ' + signType);\n        }\n        let combineStr = '';\n        let ks = Object.keys(data).sort();\n        for (let i = 0; i < ks.length; ++i) {\n            let k = ks[i];\n            if (k !== WXPayConstants.FIELD_SIGN && data[k]) {\n                let v = String(data[k]);\n                if (v.length > 0) {\n                    combineStr = combineStr + k + '=' + v + '&';\n                }\n            }\n        }\n        if (combineStr.length === 0) {\n            throw new Error('There is no data to generate signature');\n        }\n        else {\n            combineStr = combineStr + 'key=' + key;\n            if (signType === WXPayConstants.SIGN_TYPE_MD5) {\n                return this.md5(combineStr);\n            }\n            else if (signType === WXPayConstants.SIGN_TYPE_HMACSHA256) {\n                return this.hmacsha256(combineStr, key);\n            }\n            else {\n                throw new Error('Invalid signType: ' + signType);\n            }\n        }\n    },\n\n    /**\n   * 验证签名\n   *\n   * @param {object} data\n   * @param {string} key API key\n   * @param {string} signTypeParam\n   * @returns {boolean}\n   */\n    isSignatureValid: function (data, key, signTypeParam) {\n        let signType = signTypeParam || WXPayConstants.SIGN_TYPE_MD5;\n        if (data === null || typeof data !== 'object') {\n            return false;\n        }\n        else if (!data[WXPayConstants.FIELD_SIGN]) {\n            return false;\n        }\n        else {\n            return data[WXPayConstants.FIELD_SIGN] === this.generateSignature(data, key, signType);\n        }\n    },\n\n    /**\n   * 带有签名的 XML 数据\n   *\n   * @param {object} data\n   * @param {string} key\n   * @param {string} signType\n   * @returns {Promise}\n   */\n    generateSignedXml: function (data, key, signType) {\n        let clonedDataObj = JSON.parse(JSON.stringify(data));\n        clonedDataObj[WXPayConstants.FIELD_SIGN] = this.generateSignature(data, key, signType);\n        return new Promise(function (resolve, reject) {\n            WXPayUtil.obj2xml(clonedDataObj)\n                .then(function (xmlStr) {\n                    resolve(xmlStr);\n                }).catch(function (err) {\n                    reject(err);\n                });\n        });\n    },\n\n    /**\n   * 生成随机字符串\n   *\n   * @returns {string}\n   */\n    generateNonceStr: function () {\n        return uuid.v4().replace(/\\-/g, '');\n    },\n\n    /**\n   * 得到 MD5 签名结果\n   *\n   * @param {string} source\n   * @returns {string}\n   */\n    md5: function (source) {\n        return Md5(source).toUpperCase();\n    },\n\n    /**\n   * 得到 HMAC-SHA256 签名结果\n   *\n   * @param {string} source\n   * @param {string} key\n   * @returns {string}\n   */\n    hmacsha256: function (source, key) {\n        return crypto.createHmac('sha256', key).update(source, 'utf8').digest('hex').toUpperCase();\n    }\n\n};\n\n/**\n * WXPay对象\n *\n * @param {object} config\n * @constructor\n */\nlet WXPay = function (config) {\n    if (!(this instanceof WXPay)) {\n        throw new TypeError('Please use \\'new WXPay\\'');\n    }\n    // let options = ['appId', 'mchId', 'key', 'certFileContent', 'caFileContent'];\n    let options = ['appId', 'mchId', 'key'];\n    for (let i = 0; i < options.length; ++i) {\n        if (!config[options[i]]) {\n            throw new Error('Please check ' + options[i] + ' in config');\n        }\n    }\n\n    this.APPID = config['appId'];\n    this.MCHID = config['mchId'];\n    this.KEY = config['key'];\n    this.CERT_FILE_CONTENT = config['certFileContent'];\n    this.CA_FILE_CONTENT = config['caFileContent'];\n\n    this.TIMEOUT = config['timeout'] || _DEFAULT_TIMEOUT;\n    this.SIGN_TYPE = config['signType'] || WXPayConstants.SIGN_TYPE_MD5;\n    this.USE_SANDBOX = config['useSandbox'] || false;\n};\n\n/**\n * 处理 HTTP 请求的返回信息（主要是做签名验证），并将 xml 转换为 object\n *\n * @param {string} respXml\n * @returns {Promise}\n */\nWXPay.prototype.processResponseXml = function(respXml) {\n    let self = this;\n\n    return new Promise(function (resolve, reject) {\n        WXPayUtil.xml2obj(respXml).then(function (respObj) {\n            let return_code = respObj['return_code'];\n            if (return_code) {\n                if (return_code === WXPayConstants.FAIL) {\n                    resolve(respObj);\n                }\n                else if (return_code === WXPayConstants.SUCCESS) {\n                    let isValid = self.isResponseSignatureValid(respObj);\n                    if (isValid) {\n                        resolve(respObj);\n                    }\n                    else {\n                        reject(new Error('Invalid sign value in XML: ' + respXml));\n                    }\n                }\n                else {\n                    reject(new Error('Invalid return_code in XML: ' + respXml));\n                }\n            }\n            else {\n                reject(new Error('no return_code in the response XML: ' + respXml));\n            }\n        }).catch(function (err) {\n            reject(err);\n        });\n    });\n};\n\n\n/**\n * 请求响应中的签名是否合法\n *\n * @param {object} respData\n * @returns {boolean}\n */\nWXPay.prototype.isResponseSignatureValid = function(respData) {\n    return WXPayUtil.isSignatureValid(respData, this.KEY, this.SIGN_TYPE);\n};\n\n/**\n * 判断支付结果通知中的sign是否有效。必须有sign字段\n *\n * @param {object} notifyData\n * @returns {boolean}\n */\nWXPay.prototype.isPayResultNotifySignatureValid = function(notifyData) {\n    let signType;\n    let signTypeInData = notifyData[WXPayConstants.FIELD_SIGN_TYPE];\n    if (!signTypeInData) {\n        signType = WXPayConstants.SIGN_TYPE_MD5;\n    }\n    else {\n        signTypeInData = (String(signTypeInData)).trim();\n        if (signTypeInData.length === 0) {\n            signType = WXPayConstants.SIGN_TYPE_MD5;\n        }\n        else if (signTypeInData === WXPayConstants.SIGN_TYPE_MD5) {\n            signType = WXPayConstants.SIGN_TYPE_MD5;\n        }\n        else if (signTypeInData === WXPayConstants.SIGN_TYPE_HMACSHA256) {\n            signType = WXPayConstants.SIGN_TYPE_HMACSHA256;\n        }\n        else {\n            throw new Error('Invalid sign_type: ' + signTypeInData + ' in pay result notify');\n        }\n    }\n    return WXPayUtil.isSignatureValid(notifyData, this.KEY, signType);\n\n};\n\n/**\n * 向数据中添加appid、mch_id、nonce_str、sign_type、sign\n *\n * @param {object} reqData\n * @returns {object}\n */\nWXPay.prototype.fillRequestData = function (reqData) {\n    let self = this;\n    let clonedData = JSON.parse(JSON.stringify(reqData));\n    clonedData['appid'] = self.APPID;\n    clonedData['mch_id'] = self.MCHID;\n    clonedData['nonce_str'] = WXPayUtil.generateNonceStr();\n    clonedData[WXPayConstants.FIELD_SIGN_TYPE] = self.SIGN_TYPE;\n    clonedData[WXPayConstants.FIELD_SIGN] = WXPayUtil.generateSignature(clonedData, self.KEY, self.SIGN_TYPE);\n    return clonedData;\n};\n\n/**\n * HTTP(S) 请求，无证书\n *\n * @param {string} url\n * @param {object} reqData\n * @param {int} timeout\n * @returns {Promise}\n */\nWXPay.prototype.requestWithoutCert = function(url, reqData, timeout) {\n    let self = this;\n    return new Promise(function(resolve, reject) {\n        let options = {\n            url: url,\n            timeout: timeout || self.TIMEOUT\n        };\n        WXPayUtil.obj2xml(reqData).then(function (reqXml) {\n            // console.log('reqXml', reqXml);\n            options['body'] = reqXml;\n            request.post(options, function(error, response, body) {\n                if (error) {\n                    reject(error);\n                } else {\n                    // console.log('resp: ', body);\n                    resolve(body);\n                }\n            });\n        }).catch(function (err) {\n            reject(err);\n        });\n    });\n};\n\n/**\n * HTTP(S)请求，附带证书，适合申请退款等接口\n *\n * @param {string} url\n * @param {object} reqData\n * @param {int} timeout\n * @returns {Promise}\n */\nWXPay.prototype.requestWithCert = function(url, reqData, timeout) {\n    let self = this;\n    return new Promise(function(resolve, reject) {\n        let options = {\n            url: url,\n            timeout: timeout || self.TIMEOUT,\n            agentOptions: {\n                ca: self.CA_FILE_CONTENT,\n                pfx: self.CERT_FILE_CONTENT,\n                passphrase: self.MCHID\n            }\n        };\n        WXPayUtil.obj2xml(reqData).then(function (reqXml) {\n            options['body'] = reqXml;\n            request.post(options, function(error, response, body) {\n                if (error) {\n                    reject(error);\n                } else {\n                    resolve(body);\n                }\n            });\n        }).catch(function (err) {\n            reject(err);\n        });\n    });\n};\n\n/**\n * 提交刷卡支付\n *\n * @param {object} reqData\n * @param {int} timeout\n * @returns {Promise}\n */\nWXPay.prototype.microPay = function (reqData, timeout) {\n    let self = this;\n    let url = WXPayConstants.MICROPAY_URL;\n    if (self.USE_SANDBOX) {\n        url = WXPayConstants.SANDBOX_MICROPAY_URL;\n    }\n    return new Promise(function (resolve, reject) {\n        self.requestWithoutCert(url, self.fillRequestData(reqData), timeout).then(function (respXml) {\n            self.processResponseXml(respXml).then(function (respObj) {\n                resolve(respObj);\n            }).catch(function (err) {\n                reject(err);\n            });\n        }).catch(function (err) {\n            reject(err);\n        });\n    });\n};\n\n/**\n * 统一下单\n *\n * @param {object} reqData\n * @param {int} timeout\n * @returns {Promise}\n */\nWXPay.prototype.unifiedOrder = function (reqData, timeout) {\n    let self = this;\n    let url = WXPayConstants.UNIFIEDORDER_URL;\n    if (self.USE_SANDBOX) {\n        url = WXPayConstants.SANDBOX_UNIFIEDORDER_URL;\n    }\n    return new Promise(function (resolve, reject) {\n        self.requestWithoutCert(url, self.fillRequestData(reqData), timeout).then(function (respXml) {\n            self.processResponseXml(respXml).then(function (respObj) {\n                resolve(respObj);\n            }).catch(function (err) {\n                reject(err);\n            });\n        }).catch(function (err) {\n            reject(err);\n        });\n    });\n};\n\n/**\n * 查询订单\n *\n * @param {object} reqData\n * @param {int} timeout\n * @returns {Promise}\n */\nWXPay.prototype.orderQuery = function (reqData, timeout) {\n    let self = this;\n    let url = WXPayConstants.ORDERQUERY_URL;\n    if (self.USE_SANDBOX) {\n        url = WXPayConstants.SANDBOX_ORDERQUERY_URL;\n    }\n    return new Promise(function (resolve, reject) {\n        self.requestWithoutCert(url, self.fillRequestData(reqData), timeout).then(function (respXml) {\n            self.processResponseXml(respXml).then(function (respObj) {\n                resolve(respObj);\n            }).catch(function (err) {\n                reject(err);\n            });\n        }).catch(function (err) {\n            reject(err);\n        });\n    });\n};\n\n/**\n * 撤销订单, 用于刷卡支付\n *\n * @param {object} reqData\n * @param {int} timeout\n * @returns {Promise}\n */\nWXPay.prototype.reverse = function (reqData, timeout) {\n    let self = this;\n    let url = WXPayConstants.REVERSE_URL;\n    if (self.USE_SANDBOX) {\n        url = WXPayConstants.SANDBOX_REVERSE_URL;\n    }\n    return new Promise(function (resolve, reject) {\n        self.requestWithCert(url, self.fillRequestData(reqData), timeout).then(function (respXml) {\n            self.processResponseXml(respXml).then(function (respObj) {\n                resolve(respObj);\n            }).catch(function (err) {\n                reject(err);\n            });\n        }).catch(function (err) {\n            reject(err);\n        });\n    });\n};\n\n\n/**\n * 关闭订单\n *\n * @param {object} reqData\n * @param {int} timeout\n * @returns {Promise}\n */\nWXPay.prototype.closeOrder = function (reqData, timeout) {\n    let self = this;\n    let url = WXPayConstants.CLOSEORDER_URL;\n    if (self.USE_SANDBOX) {\n        url = WXPayConstants.SANDBOX_CLOSEORDER_URL;\n    }\n    return new Promise(function (resolve, reject) {\n        self.requestWithoutCert(url, self.fillRequestData(reqData), timeout).then(function (respXml) {\n            self.processResponseXml(respXml).then(function (respObj) {\n                resolve(respObj);\n            }).catch(function (err) {\n                reject(err);\n            });\n        }).catch(function (err) {\n            reject(err);\n        });\n    });\n};\n\n\n/**\n * 申请退款\n *\n * @param {object} reqData\n * @param {int} timeout\n * @returns {Promise}\n */\nWXPay.prototype.refund = function (reqData, timeout) {\n    let self = this;\n    let url = WXPayConstants.REFUND_URL;\n    if (self.USE_SANDBOX) {\n        url = WXPayConstants.SANDBOX_REFUND_URL;\n    }\n    return new Promise(function (resolve, reject) {\n        self.requestWithCert(url, self.fillRequestData(reqData), timeout).then(function (respXml) {\n            self.processResponseXml(respXml).then(function (respObj) {\n                resolve(respObj);\n            }).catch(function (err) {\n                reject(err);\n            });\n        }).catch(function (err) {\n            reject(err);\n        });\n    });\n};\n\n\n/**\n * 退款查询\n *\n * @param {object} reqData\n * @param {int} timeout\n * @returns {Promise}\n */\nWXPay.prototype.refundQuery = function (reqData, timeout) {\n    let self = this;\n    let url = WXPayConstants.REFUNDQUERY_URL;\n    if (self.USE_SANDBOX) {\n        url = WXPayConstants.SANDBOX_REFUNDQUERY_URL;\n    }\n    return new Promise(function (resolve, reject) {\n        self.requestWithoutCert(url, self.fillRequestData(reqData), timeout).then(function (respXml) {\n            self.processResponseXml(respXml).then(function (respObj) {\n                resolve(respObj);\n            }).catch(function (err) {\n                reject(err);\n            });\n        }).catch(function (err) {\n            reject(err);\n        });\n    });\n};\n\n/**\n * 下载对账单\n *\n * @param {object} reqData\n * @param {int} timeout\n * @returns {Promise}\n */\nWXPay.prototype.downloadBill = function (reqData, timeout) {\n    let self = this;\n    let url = WXPayConstants.DOWNLOADBILL_URL;\n    if (self.USE_SANDBOX) {\n        url = WXPayConstants.SANDBOX_DOWNLOADBILL_URL;\n    }\n    return new Promise(function (resolve, reject) {\n        self.requestWithoutCert(url, self.fillRequestData(reqData), timeout).then(function (respStrParam) {\n            let respStr = respStrParam.trim();\n            if (respStr.startsWith('<')) {  // XML格式，下载出错\n                self.processResponseXml(respStr).then(function (respObj) {\n                    resolve(respObj);\n                }).catch(function (err) {\n                    reject(err);\n                });\n            }\n            else {   // 下载到数据了\n                resolve({\n                    return_code: 'SUCCESS',\n                    return_msg: '',\n                    data: respStr\n                });\n            }\n        }).catch(function (err) {\n            reject(err);\n        });\n    });\n};\n\n/**\n * 交易保障\n *\n * @param {object} reqData\n * @param {int} timeout\n * @returns {Promise}\n */\nWXPay.prototype.report = function (reqData, timeout) {\n    let self = this;\n    let url = WXPayConstants.REPORT_URL;\n    if (self.USE_SANDBOX) {\n        url = WXPayConstants.SANDBOX_REPORT_URL;\n    }\n    return new Promise(function (resolve, reject) {\n        self.requestWithoutCert(url, self.fillRequestData(reqData), timeout).then(function (respXml) {\n            WXPayUtil.xml2obj(respXml).then(function (respObj) {\n                resolve(respObj);\n            }).catch(function (err) {\n                reject(err);\n            });\n        }).catch(function (err) {\n            reject(err);\n        });\n    });\n};\n\n/**\n * 转换短链接\n *\n * @param {object} reqData\n * @param {int} timeout\n * @returns {Promise}\n */\nWXPay.prototype.shortUrl = function (reqData, timeout) {\n    let self = this;\n    let url = WXPayConstants.SHORTURL_URL;\n    if (self.USE_SANDBOX) {\n        url = WXPayConstants.SANDBOX_SHORTURL_URL;\n    }\n    return new Promise(function (resolve, reject) {\n        self.requestWithoutCert(url, self.fillRequestData(reqData), timeout).then(function (respXml) {\n            self.processResponseXml(respXml).then(function (respObj) {\n                resolve(respObj);\n            }).catch(function (err) {\n                reject(err);\n            });\n        }).catch(function (err) {\n            reject(err);\n        });\n    });\n};\n\n/**\n * 授权码查询 OPENID 接口\n *\n * @param {object} reqData\n * @param {int} timeout\n * @returns {Promise}\n */\nWXPay.prototype.authCodeToOpenid = function (reqData, timeout) {\n    let self = this;\n    let url = WXPayConstants.AUTHCODETOOPENID_URL;\n    if (self.USE_SANDBOX) {\n        url = WXPayConstants.SANDBOX_AUTHCODETOOPENID_URL;\n    }\n    return new Promise(function (resolve, reject) {\n        self.requestWithoutCert(url, self.fillRequestData(reqData), timeout).then(function (respXml) {\n            self.processResponseXml(respXml).then(function (respObj) {\n                resolve(respObj);\n            }).catch(function (err) {\n                reject(err);\n            });\n        }).catch(function (err) {\n            reject(err);\n        });\n    });\n};\n\nmodule.exports = {\n    WXPayConstants: WXPayConstants,\n    WXPayUtil: WXPayUtil,\n    WXPay: WXPay\n};","const {\n    rp\n} = require('./utils');\n\nclass WXUniformMessage {\n    /**\n     * 发送统一服务消息\n     * @param {String} access_token 接口调用凭证\n     * @param {String} touser 用户openid，可以是小程序的openid，也可以是mp_template_msg.appid对应的公众号的openid\n     * @param {Object} weapp_template_msg 小程序模板消息相关的信息\n     * @param {String} weapp_template_msg.template_id 小程序模板ID\n     * @param {String} weapp_template_msg.form_id 小程序模板消息formid\n     * @param {Object} weapp_template_msg.data 小程序模板数据\n     * @param {String} weapp_template_msg.page 小程序页面路径\n     * @param {String} weapp_template_msg.emphasis_keyword  小程序模板放大关键词\n     * @param {Object} mp_template_msg  公众号模板消息相关的信息\n     * @param {String} mp_template_msg.appid 公众号appid，要求与小程序有绑定且同主体\n     * @param {String} mp_template_msg.template_id 公众号模板id\n     * @param {String} mp_template_msg.url 公众号模板消息所要跳转的url\n     * @param {Object} mp_template_msg.miniprogram 公众号模板消息所要跳转的小程序，小程序的必须与公众号具有绑定关系\n     * @param {String} mp_template_msg.miniprogram.appid 小程序appId\n     * @param {String} mp_template_msg.miniprogram.pagepath 小程序页面路径\n     * @param {Object} mp_template_msg.data 公众号模板消息的数据\n     * 具体参数名称参见官网 https://developers.weixin.qq.com/miniprogram/dev/api/open-api/uniform-message/sendUniformMessage.html\n     */\n    async sendMessage({\n        access_token,\n        touser,\n        weapp_template_msg,\n        mp_template_msg\n    }) {\n        let url = `https://api.weixin.qq.com/cgi-bin/message/wxopen/template/uniform_send?access_token=${access_token}`;\n\n        let postData = {\n            touser\n        };\n\n        if (weapp_template_msg) {\n            postData = Object.assign(postData, { weapp_template_msg })\n        }\n        if (mp_template_msg) {\n            postData = Object.assign(postData, { mp_template_msg })\n        }\n\n        const msg = await rp({\n            url: url,\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(postData)\n        });\n\n        return JSON.parse(msg.body);\n    }\n}\n\nmodule.exports = WXUniformMessage;","const request = require('request');\n\n/**\n * 发送请求\n * @param {Object} options 请求参数\n */\nconst rp = options =>\n    new Promise((resolve, reject) => {\n        request(options, (error, response, body) => {\n            if (error) {\n                reject(error);\n            }\n            resolve(response);\n        });\n    });\n\nmodule.exports = {\n    rp // request promise\n};","const {\n    rp\n} = require('./utils');\n\nclass WXMINIMessage {\n\n    async sendMessage({\n        touser,\n        template_id,\n        form_id,\n        access_token,\n        data,\n        page,\n        emphasis_keyword\n    }) {\n        let url = `https://api.weixin.qq.com/cgi-bin/message/wxopen/template/send?access_token=${access_token}`;\n\n        let postData = {\n            touser,\n            template_id,\n            form_id,\n            data,\n            page,\n            emphasis_keyword\n        };\n\n        const msg = await rp({\n            url: url,\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(postData)\n        });\n\n        return JSON.parse(msg.body);\n    }\n}\n\nmodule.exports = WXMINIMessage;","const {\n    rp\n} = require('./utils');\n\nconst cloud = require('tcb-admin-node');\n\nclass WXMINIUser {\n\n    constructor({ appId, secret }) {\n        this.appId = appId;\n        this.secret = secret;\n    }\n\n    // 获取 access_token 并缓存\n    async getCacheAccessToken(options = {}) {\n        let {\n            env = null,\n            secretId = null,\n            secretKey = null,\n            collection = 'access_token',\n            gapTime = 300000 // 5 分钟\n        } = options;\n\n        cloud.init({\n            secretId,\n            secretKey,\n            env\n        });\n\n        let db = cloud.database();\n        let result = await db.collection(collection).get();\n\n        if (result.code) {\n            return null;\n        }\n\n        // 没有缓存，获取\n        if (!result.data.length) {\n            let accessTokenBody = await this.getAccessToken(false);\n            // console.log(accessTokenBody);\n            await db.collection(collection).add({\n                accessToken: accessTokenBody.access_token,\n                expiresIn: accessTokenBody.expires_in * 1000,\n                createTime: Date.now()\n            });\n            return accessTokenBody.access_token;\n        }\n        else {\n            let data = result.data[0];\n            let {\n                _id,\n                accessToken,\n                expiresIn,\n                createTime\n            } = data;\n            \n            // access_token 依然有效\n            if (Date.now() < createTime + expiresIn - gapTime) {\n                return accessToken;\n            }\n            // 失效，重新拉取\n            else {\n                let accessTokenBody = await this.getAccessToken(false);\n                await db.collection(collection).doc(_id).set({\n                    accessToken: accessTokenBody.access_token,\n                    expiresIn: accessTokenBody.expires_in * 1000,\n                    createTime: Date.now()\n                });\n                return accessTokenBody.access_token;\n            }\n        }\n    }\n\n    // 获取 access_token\n    async getAccessToken(isTokenOnly = true) {\n        const result = await rp({\n            url: `https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appId=${this.appId}&secret=${this.secret}`,\n            method: 'GET'\n        });\n\n        if (result.code || result.errcode || !result.body) {\n            throw new Error({\n                msg: 'failed to get access_token',\n                detail: result\n            });\n        }\n\n        let rbody = (typeof result.body === 'object') ? result.body : JSON.parse(result.body);\n        return isTokenOnly ? rbody.access_token : rbody;\n    }\n\n    // 获取 openid  和 session_key\n    async codeToSession(code) {\n        const result = await rp({\n            url: `https://api.weixin.qq.com/sns/jscode2session?appId=${this.appId}&secret=${this.secret}&js_code=${code}&grant_type=authorization_code`,\n            method: 'GET'\n        });\n\n        try {\n            return JSON.parse(result.body);\n        }\n        catch (e) {\n            throw e;\n        }\n    }\n}\n\nmodule.exports = WXMINIUser;","const {\n    rp\n} = require('./utils');\n\nclass WXMINIQR {\n\n    async getMiniQRLimit({\n        access_token,\n        path,\n        width,\n        auto_color,\n        line_color,\n        is_hyaline\n    }) {\n        let url = `https://api.weixin.qq.com/wxa/getwxacode?access_token=${access_token}`;\n\n        let postData = {\n            path,\n            width,\n            auto_color,\n            line_color,\n            is_hyaline\n        };\n\n        const msg = await rp({\n            url: url,\n            encoding: null,\n            method: 'POST',\n            body: JSON.stringify(postData)\n        });\n\n        return msg.body;\n    }\n\n    async getMiniQR({\n        access_token,\n        scene,\n        page,\n        width,\n        auto_color,\n        line_color,\n        is_hyaline\n    }) {\n        let url = `https://api.weixin.qq.com/wxa/getwxacodeunlimit?access_token=${access_token}`;\n\n        let postData = {\n            scene,\n            page,\n            width,\n            auto_color,\n            line_color,\n            is_hyaline\n        };\n\n        const msg = await rp({\n            url: url,\n            encoding: null,\n            method: 'POST',\n            body: JSON.stringify(postData)\n        });\n\n        return msg.body;\n    }\n\n    async getQR({\n        access_token,\n        path,\n        width\n    }) {\n        let url = `https://api.weixin.qq.com/cgi-bin/wxaapp/createwxaqrcode?access_token=${access_token}`;\n\n        let postData = {\n            path,\n            width\n        };\n\n        const msg = await rp({\n            url: url,\n            encoding: null,\n            method: 'POST',\n            body: JSON.stringify(postData)\n        });\n\n        return msg.body;\n    }\n}\n\nmodule.exports = WXMINIQR;","const {\n    rp\n} = require('./utils');\n\nclass WXMINIActMessage {\n\n    async createActivityId(access_token) {\n        let url = `https://api.weixin.qq.com/cgi-bin/message/wxopen/activityid/create?access_token=${access_token}`;\n\n        const msg = await rp({\n            url: url,\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        });\n\n        return JSON.parse(msg.body);\n    }\n\n    async setUpdatableMsg({\n        access_token,\n        activity_id,\n        target_state,\n        template_info\n    }) {\n        let url = `https://api.weixin.qq.com/cgi-bin/message/wxopen/updatablemsg/send?access_token=${access_token}`;\n\n        let postData = {\n            activity_id,\n            target_state,\n            template_info\n        };\n\n        const msg = await rp({\n            url: url,\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(postData)\n        });\n\n        return JSON.parse(msg.body);\n    }\n}\n\nmodule.exports = WXMINIActMessage;"]}